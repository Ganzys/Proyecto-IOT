//FirebaseESP8266.h must be included before ESP8266WiFi.h
#include "FirebaseESP8266.h"
#include <ESP8266WiFi.h>
#include <ESP8266WebServer.h>


#define FIREBASE_HOST "idc-2020371011-default-rtdb.firebaseio.com" //Sin incluir http:// or https:// 
#define FIREBASE_AUTH "ZQjmavy27DRLPDAaaYndHtMBuqt0VUCyK8ANweRU"
#define WIFI_SSID "DIPLOMADO-CIC40"
#define WIFI_PASSWORD ""
#define host "172.31.112.196"

// Set up the server object
ESP8266WebServer server;

//Define FirebaseESP8266 data object
FirebaseData firebaseData;

FirebaseJson json;

void printResult(FirebaseData &data);
int TRIG = D6;      // trigger en pin 10
int ECO = D5;      // echo en pin 9
int DURACION=100;
int DISTANCIA=10;
//**************************

void setup () {

  pinMode(TRIG, OUTPUT);  // trigger como salida
  pinMode(ECO, INPUT);    // echo como entrada
  pinMode(D2, OUTPUT);
  pinMode(D4, OUTPUT);
  
Serial.begin(9600);  // Ops√¶tter serial kommunikation tilbage til computeren
WiFi.mode(WIFI_AP);
WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
Serial.print("Connecting to Wi-Fi");
while (WiFi.status() != WL_CONNECTED)
{
Serial.print(".");
delay(300);
}
Serial.println();
Serial.print("Connected with IP: ");
Serial.println(WiFi.localIP());
Serial.println();

// Configure the server's routes
server.on("/",handleIndex); // use the top root path to report the last sensor valuer //S1
server.on("/update",handleUpdate); // use this route to update the sensor value //S2
server.begin();


  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
  Firebase.reconnectWiFi(true);


  //Set the size of WiFi rx/tx buffers in the case where we want to work with large data.
  firebaseData.setBSSLBufferSize(1024, 1024);


  //Set the size of HTTP response buffers in the case where we want to work with large data.
  firebaseData.setResponseSize(1024);


  
  Firebase.setReadTimeout(firebaseData, 1000 * 60);
  //tiny, small, medium, large and unlimited.
  //Size and its write timeout e.g. tiny (1s), small (10s), medium (30s) and large (60s).
  Firebase.setwriteSizeLimit(firebaseData, "tiny");


  Serial.println("------------------------------------");
  Serial.println("Actualizacion de distancia");

}

void handleIndex(){

String W = "<!DOCTYPE HTML>\r\n \r\n<html><head><h1>Medidor de liquidos Uwu</h1><meta http-equiv=\"refresh\" content=\"2\"></head><body > <h2>Distancia: </h2> La Medida de el agua es de : "+ String(DISTANCIA)+"cm<br> </body></html>\n";
server.send(200,"text/html",W);
}

void handleUpdate(){
// The value will be passed as a URL argument //S2
DISTANCIA = server.arg("value").toFloat();
Serial.println(DISTANCIA);
server.send(200,"text/plain","updated");
}

void printResult(FirebaseData &data)
{
  Serial.println();
  FirebaseJson &json = data.jsonObject();
  //Print all object data
  Serial.println("Pretty printed JSON data:");
  String jsonStr;
  json.toString(jsonStr, true);
  Serial.println(jsonStr);
  Serial.println();
  Serial.println("Iterate JSON data:");
  //Serial.println();
}


void loop () {
server.handleClient();

    
  // put your main code here, to run repeatedly:
 digitalWrite(TRIG, HIGH);     // generacion del pulso a enviar
  delay(1);       // al pin conectado al trigger
  digitalWrite(TRIG, LOW);    // del sensor
  
  DURACION = pulseIn(ECO, HIGH);  // con funcion pulseIn se espera un pulso
            // alto en Echo
 DISTANCIA = DURACION / 58.2;    // distancia medida en centimetros
  Serial.print("Distancia:  ");
  Serial.println(DISTANCIA);    // envio de valor de distancia por monitor serial
  delay(200);       // demora entre datos

  String path = "/Test";
  json.set("Distancia en cm" + String(1), DURACION/58.2);


  if(DISTANCIA<=10){
    digitalWrite(D2, HIGH);
  }else{
    digitalWrite(D2, LOW);
  }

  
  Firebase.getInt(firebaseData, "Test/Led");   // lee desde firebase un eventto como un switch
  int Led = firebaseData.intData();            // para encender el led interno del m

  if(Led==1){
    digitalWrite(D4, HIGH);
  }else{
    digitalWrite(D4, LOW);
  }




  if (Firebase.updateNode(firebaseData, path + "/float", json))
  {
    //Serial.print("VALUE: ");
    printResult(firebaseData);
    Serial.println("------------------------------------");
    Serial.println();
  }
  else
  {
    Serial.println("FALLO");
    Serial.println("REASON: " + firebaseData.errorReason());
    Serial.println("------------------------------------");
    Serial.println();
  }

    Serial.print("connecting to ");
    Serial.println(host);

    // Use WiFiClient class to create TCP connections
    WiFiClient client;
    const int httpPort = 80;
    if (!client.connect(host, httpPort)) {
        Serial.println("fallo en la conexion :(");
        return;
    }


    // aqui nos responde el server
 client.print(String("POST http://localhost/Base/connect.php?") + 
                          ("&DISTANCIA=") + DISTANCIA +               
                          " HTTP/1.1\r\n" +
                 "Host: " + host + "\r\n" +
                 "Connection: close\r\n\r\n");
    unsigned long timeout = millis();
    while (client.available() == 0) {
        if (millis() - timeout > 1000) {
            Serial.println(">>> Client Timeout !");
            client.stop();
            return;
        }
    }

    // lee todas las linead de el servidor para imprimirlas
    while(client.available()) {
        String line = client.readStringUntil('\r');
        Serial.print("conexion exitosa");
        
    }

    Serial.println();
    Serial.println("cerrando conexion :)");
    
  delay(3000);
}
